####################################################################################################################################################################
1. Exercise - Functions with input
# Review: 
# Create a function called greet(). 
# Write 3 print statements inside the function.
# Call the greet() function and run your code.

def greet(name):
  print(f"Hi! {name}")
  print("Nice to see you here!")
  print("Enjoy your tour!")
greet("Lucas")

name = "Lucas"
parameter => name
"Lucas" => argument

#Functions with more than 1 input
def greet_with(name, location):
  print(f"Hello {name}")
  print(f"What is it like in {location}?")

#positional argument
def my_function(a,b,c):
  pass
my_function(1,2,3) => a=1,b=2,c=3
my_function(3,1,2) => a=3,b=1,c=2

#keywords argument
def my_function(a,b,c):
  pass
my_function(a=1,b=2,c=3)
my_function(c=3,b=2,a=1)
# doesn't matter if the order of parameters is changed

####################################################################################################################################################################
2. Exercise - Area Calc Exercise(day-8-1-exercise)

#Write your code below this line üëá
def paint_calc(height, width, cover):
  need_can_number = int(height * width / cover) 
  if height * width % cover != 0:
    need_can_number += 1
  pprint(f"You'll need {need_can_number} cans of paint")


#Write your code above this line üëÜ
# Define a function called paint_calc() so that the code below works.   

# üö® Don't change the code below üëá
test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))
coverage = 5
paint_calc(height=test_h, width=test_w, cover=coverage)


################# Or ################

#Write your code below this line üëá
import math
def paint_calc(height, width, cover):
  need_can_number = math.ceil(height * width / cover) 
  print(f"You'll need {need_can_number} cans of paint")


#Write your code above this line üëÜ
# Define a function called paint_calc() so that the code below works.   

# üö® Don't change the code below üëá
test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))
coverage = 5
paint_calc(height=test_h, width=test_w, cover=coverage)

####################################################################################################################################################################
3. Exercise - Prime Number Check Exercise(day-8-2-exercise)

Mine:
#Write your code below this line üëá

def prime_checker(number):
  prime = True
  if number == 0 or number == 1:
    prime = False
  elif number == 2 or number == 3:
    prime = True
  elif number % 2 == 0:
    prime = False
  else:
    for i in range(3,number,2):
      if number % i == 0:
        prime = False
        break
        
  if prime:
    print("It's a prime number.")
  else:
    print("It's not a prime number.")

#Write your code above this line üëÜ
    
#Do NOT change any of the code belowüëá
n = int(input("Check this number: "))
prime_checker(number=n)

####################################################################################################################################################################
4. Exercise - Caesar Cipher Exercise Part 1(caesar-cipher-1-start)

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

#TODO-1: Create a function called 'encrypt' that takes the 'text' and 'shift' as inputs.

def encrypt(plain_text, shift_amount):
  encoded_text = ""
  for c in plain_text:
    # z + 5 out of range 
    encoded_position = (alphabet.index(c) + shift_amount) % 26
    encoded_text += alphabet[encoded_position]
  print(f"The encoded text is: {encoded_text}.")

    #TODO-2: Inside the 'encrypt' function, shift each letter of the 'text' forwards in the alphabet by the shift amount and print the encrypted text.  
    #e.g. 
    #plain_text = "hello"
    #shift = 5
    #cipher_text = "mjqqt"
    #print output: "The encoded text is mjqqt"

    ##HINT: How do you get the index of an item in a list:
    #https://stackoverflow.com/questions/176918/finding-the-index-of-an-item-in-a-list

    ##üêõBug alert: What happens if you try to encode the word 'civilization'?üêõ

#TODO-3: Call the encrypt function and pass in the user inputs. You should be able to test the code and encrypt a message. 
encrypt(plain_text = text, shift_amount = shift)

####################################################################################################################################################################
5. Exercise - Caesar Cipher Exercise Part 2(caesar-cipher-2-start)

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

def encrypt(plain_text, shift_amount):
  cipher_text = ""
  for letter in plain_text:
    position = alphabet.index(letter)
    new_position = (position + shift_amount) % 26
    cipher_text += alphabet[new_position]
  print(f"The encoded text is {cipher_text}")

#TODO-1: Create a different function called 'decrypt' that takes the 'text' and 'shift' as inputs.

def decrypt(plain_text, shift_amount):
  cipher_text = ""
  for letter in plain_text:
    position = alphabet.index(letter)
    new_position = (position - shift_amount) % 26
    cipher_text += alphabet[new_position]
  print(f"The encoded text is {cipher_text}")



  #TODO-2: Inside the 'decrypt' function, shift each letter of the 'text' *backwards* in the alphabet by the shift amount and print the decrypted text.  
  #e.g. 
  #cipher_text = "mjqqt"
  #shift = 5
  #plain_text = "hello"
  #print output: "The decoded text is hello"


#TODO-3: Check if the user wanted to encrypt or decrypt the message by checking the 'direction' variable. Then call the correct function based on that 'drection' variable. You should be able to test the code to encrypt *AND* decrypt a message.
if direction == "encode":
  encrypt(plain_text=text, shift_amount=shift)
elif direction == "decode":
  decrypt(plain_text=text, shift_amount=shift)
else:
  print("Type Error.")
  direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")


####################################################################################################################################################################
6. Exercise - Caesar Cipher Exercise Part 3(caesar-cipher-3-start)

Mine:
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

#TODO-1: Combine the encrypt() and decrypt() functions into a single function called caesar(). 

def encrypt(plain_text, shift_amount):
  cipher_text = ""
  for letter in plain_text:
    position = alphabet.index(letter)
    new_position = position + shift_amount
    cipher_text += alphabet[new_position]
  print(f"The encoded text is {cipher_text}")

def decrypt(cipher_text, shift_amount):
  plain_text = ""
  for letter in cipher_text:
    position = alphabet.index(letter)
    new_position = position - shift_amount
    plain_text += alphabet[new_position]
  print(f"The decoded text is {plain_text}")

def caesar(caesar_direction, caesar_text, caesar_shift):

  if caesar_direction == "encode":
    encrypt(plain_text=caesar_text, shift_amount=caesar_shift)
  elif caesar_direction == "decode":
    decrypt(cipher_text=caesar_text, shift_amount=caesar_shift)

#TODO-2: Call the caesar() function, passing over the 'text', 'shift' and 'direction' values.
caesar(caesar_direction = direction, caesar_text = text, caesar_shift = shift)

#########
Teacher's

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

#TODO-1: Combine the encrypt() and decrypt() functions into a single function called caesar(). 

def caesar(start_text, shift_amount, cipher_direction):
  end_text = ""
  if cipher_direction == "decode":
      shift_amount *= -1
  for letter in start_text:
    position = alphabet.index(letter)
    new_position = (position + shift_amount)
    end_text += alphabet[new_position]
  print(f"The {cipher_direction}d text is {end_text}")
    
#TODO-2: Call the caesar() function, passing over the 'text', 'shift' and 'direction' values.
caesar(cipher_direction = direction, start_text = text, shift_amount = shift)


####################################################################################################################################################################
7. Exercise - Caesar Cipher Exercise Part 4(caesar-cipher-4-start)

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

def caesar(start_text, shift_amount, cipher_direction):
  end_text = ""
  if cipher_direction == "decode":
    shift_amount *= -1
  for char in start_text:
    #TODO-3: What happens if the user enters a number/symbol/space?
    #Can you fix the code to keep the number/symbol/space when the text is encoded/decoded?
    #e.g. start_text = "meet me at 3"
    #end_text = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢ 3"
    if char in alphabet:
      position = alphabet.index(char)
      new_position = position + shift_amount
      end_text += alphabet[new_position]
    else:
      end_text += char
    
  print(f"Here's the {cipher_direction}d result: {end_text}")

#TODO-1: Import and print the logo from art.py when the program starts.
from art import logo
print(logo)
#TODO-4: Can you figure out a way to ask the user if they want to restart the cipher program?
#e.g. Type 'yes' if you want to go again. Otherwise type 'no'.
#If they type 'yes' then ask them for the direction/text/shift again and call the caesar() function again?
#Hint: Try creating a while loop that continues to execute the program if the user types 'yes'. 
end_of_game = False
while not end_of_game:
  direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
  text = input("Type your message:\n").lower()
  shift = int(input("Type the shift number:\n"))

#TODO-2: What if the user enters a shift that is greater than the number of letters in the alphabet?
#Try running the program and entering a shift number of 45.
#Add some code so that the program continues to work even if the user enters a shift number greater than 26. 
#Hint: Think about how you can use the modulus (%).
  shift %= 26
  caesar(start_text=text, shift_amount=shift, cipher_direction=direction)

  #if the player wants to play again
  play_choice = input("Type 'yes' if you want to go again. Otherwise, type 'no'.\n")
  if play_choice == 'no':
    print("Goodbye.")
    end_of_game = True

