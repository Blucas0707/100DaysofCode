###################################################################################################################################################################
1. Function with outputs
def my_funstion():
  result = 3*2
  return result
a = my_function()
print(a)
new function: str.title()
###################################################################################################################################################################
2. Exercise- Days in Month (day-10-1-exercise)

def is_leap(year):
  if year % 4 == 0:
    if year % 100 == 0:
      if year % 400 == 0:
        print("Leap year.")
        return 1
      else:
        print("Not leap year.")
        return 0
    else:
      print("Leap year.")
      return 1
  else:
    print("Not leap year.")
    return 0

def days_in_month(year, month):
  month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  
  if month == 2:  
    days_month = month_days[month-1] + is_leap(year)
  else:
    days_month = month_days[month-1]
  return days_month
  
#ðŸš¨ Do NOT change any of the code below 
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)

####
Teacher's

def is_leap(year):
  if year % 4 == 0:
    if year % 100 == 0:
      if year % 400 == 0:
        print("Leap year.")
        return True
      else:
        print("Not leap year.")
        return False
    else:
      print("Leap year.")
      return True
  else:
    print("Not leap year.")
    return False

def days_in_month(year, month):
  month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  
  if is_leap(year) and month == 2:  
    return 29
  else:
    days_month = month_days[month-1]
  return days_month
  
#ðŸš¨ Do NOT change any of the code below 
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)
###################################################################################################################################################################
2. Docstring
def my_function()
  ### Docsting ###
  print("Hello")

###################################################################################################################################################################
3. Exercise - Calculator 1(calculator-start)

###Add
def add(a,b):
  return a + b
###substract
def substract(a,b):
  return a-b
###Multiply
def multiply(a,b):
  return a*b
###devide
def devide(a,b):
  return a/b

operations = {
  '+':add,
  '-':substract,
  '*':multiply,
  '/':devide
}

num1 = int(input("What's the first number?: "))
num2 = int(input("What's the second number?: "))
for symbol in operations:
  print(symbol)
operation_symbol = input("Pick an operation from the line above: ")
answer = operations[operation_symbol](num1,num2)
print(f"{num1} {operation_symbol} {num2} = {answer}")

###################################################################################################################################################################
4. Exercise - Calculator 2(calculator-start)

from art import logo
###Add
def add(a,b):
  return a + b

###substract
def substract(a,b):
  return a-b

###Multiply
def multiply(a,b):
  return a*b
###devide
def devide(a,b):
  return a/b

operations = {
  '+':add,
  '-':substract,
  '*':multiply,
  '/':devide
}
def calculator():
  print(logo)
  num1 = float(input("What's the first number?: "))
  for symbol in operations:
    print(symbol)

  continue_game = True
  while continue_game:
    operation_symbol = input("Pick an operation: ")
    num2 = float(input("What's the next number?: "))
    calculation_function = operations[operation_symbol]
    answer = calculation_function(num1,num2)
    print(f"{num1} {operation_symbol} {num2} = {answer}")
    game_on = input(f"Type 'y' to continue calculating with {answer}, or type 'n' to start a new calculation.")
    if game_on == 'y':
      num1 = answer
    else:
      continue_game = False
      calculator()
calculator()
