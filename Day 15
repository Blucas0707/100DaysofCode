1. install python package: https://www.python.org/downloads/
2. download Pycharm: https://www.jetbrains.com/pycharm/download/#section=mac

Project - Coffee Machine

########Mine##########

MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "milk":0,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

resources = {
    "water": 300,
    "milk": 200,
    "coffee": 100,
}



# TODO 1. buyer choose coffee => off or other typing, stop

def buyer_choice():
    choice = input("What would you like? (espresso/latte/cappuccino): ").lower()
    return choice

# TODO 2. insert coins - quarter 0.25, dimes 0.1 nickles 0.05 pennies 0.01
def insert_coins():
    print("Please insert coins.")
    coins = {
        "quarter":0.25,
        "dimes":0.1,
        "nickles":0.05,
        "pennies":0.01
    }
    quarter = int(input("how many quarter?: "))
    dimes = int(input("how many dimes?: "))
    nickles = int(input("how many nickles?: "))
    pennies = int(input("how many pennies?: "))
    total_insert = quarter * coins["quarter"] + dimes * coins["dimes"] + nickles * coins["nickles"] + pennies * coins["pennies"]
    return total_insert

# TODO 3. judge money is sufficient => no, sorry, yes, in change
def judge_money_enough(coffee, money):
    coffee_price = MENU[coffee]["cost"]
    in_change = round(money - coffee_price,2)
    if in_change >= 0:
        print(f"Here is ${in_change} dollars in change.")
        return in_change
    else:
        print("Sorry that's not enough money. Money refunded.")
        return in_change

# TODO 4. if money is enough => judge resource is enoungh => yes, enjoy + change resource, no, sorry
def judge_resouce_enough(resources, coffee):
    water_left = resources["water"]
    milk_left = resources["milk"]
    coffee_left = resources["coffee"]

    coffee_water = MENU[coffee]["ingredients"]["water"]
    coffee_milk = MENU[coffee]["ingredients"]["milk"]
    coffee_coffee = MENU[coffee]["ingredients"]["coffee"]

    if water_left >= coffee_water and milk_left >= coffee_milk and coffee_left >= coffee_coffee:
        print(f"Here is your {coffee} ☕.Enjoy!")
        resources["water"] -= coffee_water
        resources["milk"] -= coffee_milk
        resources["coffee"] -= coffee_coffee
        return True
    elif water_left < coffee_water:
        print("Sorry there is not enough water.")
    elif milk_left < coffee_milk:
        print("Sorry there is not enough milk.")
    elif coffee_left < coffee_coffee:
        print("Sorry there is not enough coffee.")
    return False

# TODO 5. display report
def display_report(resources,money):
    print(f"Water: {resources['water']}ml")
    print(f"Milk: {resources['milk']}ml")
    print(f"Coffee: {resources['coffee']}ml")
    print(f"Money: ${money}")


coffee_contine = True
coffee_money = 0
while coffee_contine:
    coffee_choice = buyer_choice()
    if coffee_choice in MENU:
        insert_money = insert_coins()
        # print(insert_money)
        in_change = judge_money_enough(coffee_choice, insert_money)
        if in_change>=0:
            coffee_money = insert_money - in_change
            judge_resouce_enough(resources, coffee_choice)

    elif coffee_choice == "report":
        display_report(resources,coffee_money)
    else:
        coffee_contine = False

######Teacher's##########

MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

profit = 0
resources = {
    "water": 300,
    "milk": 200,
    "coffee": 100,
}


def is_resource_sufficient(order_ingredients):
    """Returns True when order can be made, False if ingredients are insufficient."""
    for item in order_ingredients:
        if order_ingredients[item] > resources[item]:
            print(f"​Sorry there is not enough {item}.")
            return False
    return True


def process_coins():
    """Returns the total calculated from coins inserted."""
    print("Please insert coins.")
    total = int(input("how many quarters?: ")) * 0.25
    total += int(input("how many dimes?: ")) * 0.1
    total += int(input("how many nickles?: ")) * 0.05
    total += int(input("how many pennies?: ")) * 0.01
    return total


def is_transaction_successful(money_received, drink_cost):
    """Return True when the payment is accepted, or False if money is insufficient."""
    if money_received >= drink_cost:
        change = round(money_received - drink_cost, 2)
        print(f"Here is ${change} in change.")
        global profit
        profit += drink_cost
        return True
    else:
        print("Sorry that's not enough money. Money refunded.")
        return False


def make_coffee(drink_name, order_ingredients):
    """Deduct the required ingredients from the resources."""
    for item in order_ingredients:
        resources[item] -= order_ingredients[item]
    print(f"Here is your {drink_name} ☕️. Enjoy!")


is_on = True

while is_on:
    choice = input("​What would you like? (espresso/latte/cappuccino): ")
    if choice == "off":
        is_on = False
    elif choice == "report":
        print(f"Water: {resources['water']}ml")
        print(f"Milk: {resources['milk']}ml")
        print(f"Coffee: {resources['coffee']}g")
        print(f"Money: ${profit}")
    else:
        drink = MENU[choice]
        if is_resource_sufficient(drink["ingredients"]):
            payment = process_coins()
            if is_transaction_successful(payment, drink["cost"]):
                make_coffee(choice, drink["ingredients"])








